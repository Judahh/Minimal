import("global");

new("PetFood", {
    (String)new("name");
    (Unsigned(Number))new("price");
    (Natural)new("portion");
    (name, price, portion) -> {
        set(this.name, name);
        set(this.price, price);
        set(this.portion, portion);
    };
});

new("Cat", {
    (String)new("name");

    (name) -> {
        set(this.name, name);
    };

    new("sound", () -> {
        -> "Meow";
    });

    new("eat", (food: PetFood) -> {
        log("Yum yum!");
        set(food.portion, subtract(food.portion, 1));
    });
});

new("Dog", {
    (String)new("name");

    (name) -> {
        set(this.name, name);
    };

    new("sound", () -> {
        -> "Woof";
    });

     new("eat", (food: PetFood) -> {
        log("Yum yum!");
        set(food.portion, subtract(food.portion, 1));
    });
});

new("Pet", or(Cat, Dog));

new("PetEngine", {
    new("generateFood", (pet: Pet) -> {
        (PetFood)new("petFood");

        if (pet.isInstanceOf(Cat), {
            set(petFood, PetFood("Fish", 10, 100));
        },{
            set(petFood, PetFood("Meat", 20, 200));
        });
        -> petFood;
    });

    new("generateFood2", (pet: Pet) -> {
        if(pet.isInstanceOf(Cat), {
            final.-> PetFood("Fish", 20, 200);
        },{
            final.-> PetFood("Meat", 10, 100);
        });
    });

    new("generateFood3", (pet: Pet) -> {
        -> if(pet.isInstanceOf(Cat),
            PetFood("Fish", 30, 300),
            PetFood("Meat", 30, 300)
        );
    });

    new("generateFood4", (pet: Pet) -> {
        if(pet.isInstanceOf(Cat), {
            -> PetFood("Fish", 40, 400);
        },{
            -> PetFood("Meat", 40, 400);
        });
    });

    new("giveFood", (pet: Pet, petFood: PetFood) -> {
        log("Here is your food, " , pet.name , "!");
        pet.eat(petFood);
    });
});

# Some Initial Comment

##
 # A simple example of a pet engine that generates food for pets and feeds them.
 # The engine can generate food for both cats and dogs.
 #
 # - Returns void.
 # - Prints the name, price, and portion of the food.
##
new("main", () -> {
    new("cat", Cat("Kitty"));
    new("dog", Dog("Doggy"## Some Double Internal Comment ##)); # Some Comment

    # Some Comment Over Comment
    new("catFood", FoodGenerator.generate(cat##blooou##));
    new("dogFood", FoodGenerator.generate(dog));

    log(catFood.name); #Some Comment .f.ewveovkerv : ;}~l^}DPSL}A
    log(catFood.price);
    log(catFood.portion)### #Some Tripple Internal Comment ###;

    log(dogFood.name);
    log(dogFood.price);
    log(dogFood.portion);

    PetEngine.giveFood(cat, catFood);
    PetEngine.giveFood(dog, dogFood);

    if(greaterThanOrEquals(dogFood.portion, catFood.portion), {
        log("Doggy has more food! Or they have the same amount.");
    },{
        log("Kitty has more food!");
    });
    log("Doggy has '" , dogFood.portion , "' portions of food.");
    log("Kitty has '" , catFood.portion , "' portions of food.");
    log("Doggy first Letter is '" , 'D' , "'.");
});

main();